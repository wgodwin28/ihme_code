class(crab_dt$width)
library(data.table)
mammals_dt <- as.data.table(mammals_dt)
crab_dt[width<26, mean(n.satellites)]
crab_dt[width<26, mean(get(n.satellites))]
crab_dt[width<26, mean(crab_dt$n.satellites)]
crab_dt[width<26, n.satellites, mean]
crab_dt <- as.data.table(crab_dt)
crab_dt[width<26, n.satellites, mean]
crab_dt[width<26, mean(n.satellites)]
crab_dt[width>=26, mean(n.satellites)]
mean(crab_dt$n.satellites)
crab_dt[width<26, mean(n.satellites)]
crab_dt[width>=26, mean(n.satellites)]
table(crab_dt$color)
crab_dt[width<26, table(color)]
crab_dt[width>=26, table(color)]
table(crab_dt$color)
crab_dt[width<26, table(color)]
crab_dt[width>=26, table(color)]
crab_other <- read.csv("C:/Users/wgodwin/Desktop/BIO 509/data/crabother.csv")
crab_other <- read.csv("C:/Users/wgodwin/Desktop/BIO 509/data/othercrab.csv")
rm(list=ls())
windows <- Sys.info()[1]=="Windows"
root <- ifelse(windows,"J:/","/home/j/")
user <- ifelse(windows, Sys.getenv("USERNAME"), Sys.getenv("USER"))
code.dir <- paste0(ifelse(windows, "H:", paste0("/homes/", user)), "/risk_factors/")
## Packages
library(data.table)
library(ggplot2)
library(RMySQL)
library(maptools)
library(gridExtra)
library(ggrepel)
dt <- fread(""J:/temp/wgodwin/gpr_input/run1/wash_water_imp_bra_subnat.csv"")
dt <- fread("J:/temp/wgodwin/gpr_input/run1/wash_water_imp_bra_subnat.csv")
sdi <- fread("C:/Users/wgodwin/Desktop/sdi.csv")
imp <- fread("J:/temp/wgodwin/gpr_input/run1/wash_water_imp_bra_subnat.csv")
dt <- merge(imp, sdi, by = c("location_id", "year_id"))
head(imp)
head(sdi)
locs <- fread("J:/temp/wgodwin/diagnostics/loc_metadata.csv")
locs <- locs[, .(location_id, location_name, level)]
sdi <- merge(sdi, locs, by="location_id")
sdi <- merge(sdi, locs, by="location_name")
head(sdi)
dt <- merge(imp, sdi, by = c("location_id", "year_id"))
dt <- merge(imp, sdi, by = c("location_id", "year_id"), all.x = T)
dt[, is.na(mean_value)]
dt[is.na(mean_value)]
dt <- merge(imp, sdi, by = c("location_id", "year_id"))
head(dt)
dt[level == 3]
dt[level == 4]
dt[grep("ZAF", ihme_loc_id)
]
dt[grep("IND", ihme_loc_id)
]
dt[grep("IND", ihme_loc_id)]
dt[grep("IDN", ihme_loc_id)]
plot(dt$data, dt$mean_value)
plot(dt$data, dt$data)
plot(dt$mean_value, dt$data)
dt[data >.8 & mean_value >.8]
dt[data >.6 & mean_value >.8]
dt[mean_value >.4 & mean_value <.6  & data <.2]
setnames(dt, "mean_value", "sdi")
dt[sdi >.4 & sdi <.6  & data <.1]
nat_dt <- dt[level == 3]
plot(nat_dt$sdi, nat_dt$data)
lowess(nat_dt$sdi, nat_dt$data)
plot(lowess(nat_dt$sdi, nat_dt$data))
plot(lowess(nat_dt$sdi, nat_dt$data), lines())
plot(lowess(nat_dt$sdi, nat_dt$data), lines(dt))
plot(lowess(nat_dt$sdi, nat_dt$data), lines(nat_dt))
plot(lowess(nat_dt$sdi, nat_dt$data), lines(nat_dt$sdi, nat_dt$data))
plot(lowess(nat_dt$sdi, nat_dt$data))
plot(nat_dt$sdi, nat_dt$data, main = "lowess(nat_dt)")
lines(lowess(nat_dt))
lines(lowess(nat_dt), na.rm = T)
warnings()
nat_dt[!is.na(data),]
nat_dt<-nat_dt[!is.na(data),]
nat_dt<-nat_dt[!is.na(sdi),]
plot(nat_dt$sdi, nat_dt$data, main = "lowess(nat_dt)")
lines(lowess(nat_dt))
lines(lowess(nat_dt), col=2)
plotLowess(data ~ sdi, data = nat_dt)
install.packages("gplots")
library(gplots)
plotLowess(data ~ sdi, data = nat_dt)
plotLowess(data ~ sdi, data = nat_dt, f = 3)
plotLowess(data ~ sdi, dat1/3a = nat_dt, f = )
plotLowess(data ~ sdi, data = nat_dt, f = 1/3)
install.packages("modreg")
library(modreg)
plot(nat_dt$sdi, nat_dt$data, main = "lowess(nat_dt)")
lines(lowess(nat_dt$sdi, nat_dt$data))
lines(lowess(nat_dt$sdi, nat_dt$data, f= .2), col = 3)
lines(lowess(nat_dt$sdi, nat_dt$data, f= .1), col = 4)
lines(lowess(nat_dt$sdi, nat_dt$data, f= .5), col = 5)
sdi <- fread("C:/Users/wgodwin/Desktop/sdi.csv")
imp <- fread("J:/temp/wgodwin/gpr_input/run1/wash_water_imp_bra_subnat.csv")
dt <- merge(imp, sdi, by = c("location_id", "year_id"))
locs <- fread("J:/temp/wgodwin/diagnostics/loc_metadata.csv")
locs <- locs[, .(location_id, location_name, level)]
sdi <- merge(sdi, locs, by="location_name")
dt <- merge(imp, sdi, by = c("location_id", "year_id"))
setnames(dt, "mean_value", "sdi")
nat_dt <- dt[level == 3]
##########################
sdi <- fread("C:/Users/wgodwin/Desktop/sdi.csv")
imp <- fread("J:/temp/wgodwin/gpr_input/run1/wash_water_imp_bra_subnat.csv")
locs <- fread("J:/temp/wgodwin/diagnostics/loc_metadata.csv")
locs <- locs[, .(location_id, location_name, level)]
sdi <- merge(sdi, locs, by="location_name")
dt <- merge(imp, sdi, by = c("location_id", "year_id"))
setnames(dt, "mean_value", "sdi")
nat_dt <- dt[level == 3]
plot(nat_dt$sdi, nat_dt$data, main = "Lowess Improved Water")
lines(lowess(nat_dt$sdi, nat_dt$data))
lines(lowess(nat_dt$sdi, nat_dt$data, f= .2), col = 3)
lines(lowess(nat_dt$sdi, nat_dt$data, f= .1), col = 4)
lines(lowess(nat_dt$sdi, nat_dt$data, f= .5), col = 5)
plot(nat_dt$sdi, nat_dt$data, main = "Lowess Improved Water")
lines(lowess(nat_dt$sdi, nat_dt$data))
lines(lowess(nat_dt$sdi, nat_dt$data, f= .2), col = 3)
lines(lowess(nat_dt$sdi, nat_dt$data, f= .1), col = 4)
lines(lowess(nat_dt$sdi, nat_dt$data, f= .5), col = 5)
rm(list = ls())
library(data.table)
sdi <- fread("C:/Users/wgodwin/Desktop/sdi.csv")
imp <- fread("J:/temp/wgodwin/gpr_input/run1/wash_water_imp_bra_subnat.csv")
locs <- fread("J:/temp/wgodwin/diagnostics/loc_metadata.csv")
locs <- locs[, .(location_id, location_name, level)]
sdi <- merge(sdi, locs, by="location_name")
dt <- merge(imp, sdi, by = c("location_id", "year_id"))
setnames(dt, "mean_value", "sdi")
nat_dt <- dt[level == 3]
plot(nat_dt$sdi, nat_dt$data, main = "Lowess Improved Water")
lines(lowess(nat_dt$sdi, nat_dt$data))
lines(lowess(nat_dt$sdi, nat_dt$data, f= .2), col = 3)
lines(lowess(nat_dt$sdi, nat_dt$data, f= .1), col = 4)
lines(lowess(nat_dt$sdi, nat_dt$data, f= .5), col = 5)
imp_san <- fread("J:/temp/wgodwin/gpr_input/run1/wash_sanitation_imp.csv")
imp_san <- fread("J:/temp/wgodwin/gpr_input/run1/wash_sanitation_imp_ubcov.csv")
dt <- merge(imp_san, sdi, by = c("location_id", "year_id"))
setnames(dt, "mean_value", "sdi")
nat_dt <- dt[level == 3]
head(nat_dt)
plot(nat_dt$sdi, nat_dt$data, main = "Lowess Improved Sanitation")
lines(lowess(nat_dt$sdi, nat_dt$data))
nat_dt[sdi >.8 & data >.8]
nat_dt[sdi <.8 & sdi >.6 & data >.8]
rm(list = ls())
# Define indicator family; can be water, sani, or hw
indi_fam <- "water"
# Define agg level; can be country or '' [use '' for default]
agg_level <- 'country'
# Define indicator era
sdg <- F
# define process
windows <- Sys.info()[1]=="Windows"
user <- ifelse(windows, Sys.getenv("USERNAME"), Sys.getenv("USER"))
project <- ifelse(user == "wgodwin", "gbd", "geo")
# Set repo path
root <- ifelse(Sys.info()[1]=="Windows", "J:/", "/snfs1/")
if(project == "gbd") repo <- ifelse(Sys.info()[1]=="Windows", 'H:/wash_mapping/01_collapse/',
'/snfs2/HOME/wgodwin/wash_mapping/01_collapse/')
#'/share/code/geospatial/adesh/wash_mapping/01_collapse/')
# Load Packages
# Set package library
#if(Sys.info()[1]!="Windows") {
#package_lib <- paste0(root,'temp/geospatial/packages')
#.libPaths(package_lib)
#}
# Detach all but base packages
detachAllPackages <- function() {
basic.packages <- c("package:stats","package:graphics","package:grDevices",
"package:utils","package:datasets","package:methods",
"package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:",search()))==1,TRUE,FALSE)]
package.list <- setdiff(package.list,basic.packages)
if (length(package.list)>0)  for (package in package.list)
detach(package, character.only=TRUE)
}
detachAllPackages()
# Load and install, if necessary, needed packages
packages <- c('data.table', 'haven', 'survey', 'reshape2', 'dplyr')
new.packages <- packages[!(packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(packages, library, character.only = T)
#for (data_type in c("pt", "poly")){
# Load data
data_type <- "pt"
if (!("pt_collapse" %in% ls()) & data_type == 'pt') {
name <- load(paste0(root,'LIMITED_USE/LU_GEOSPATIAL/geo_matched/wash/points_2017_09_06.Rdata'))
Encoding(pt_collapse$w_source_drink) <- "windows-1252"
Encoding(pt_collapse$w_source_other) <- "windows-1252"
Encoding(pt_collapse$t_type) <- "windows-1252"
pt_collapse <- get(name)
}
if (!("poly_collapse" %in% ls()) & data_type == 'poly') {
name <- load(paste0(root,'LIMITED_USE/LU_GEOSPATIAL/geo_matched/wash/poly_2017_09_05.Rdata'))
Encoding(poly_collapse$w_source_drink) <- "windows-1252"
Encoding(poly_collapse$w_source_other) <- "windows-1252"
Encoding(poly_collapse$t_type) <- "windows-1252"
pt_collapse <- get(name)
rm(poly_collapse)
}
packages <- c('data.table', 'haven', 'survey', 'reshape2', 'dplyr', 'feather')
new.packages <- packages[!(packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(packages, library, character.only = T)
if (!("pt_collapse" %in% ls()) & data_type == 'pt') {
name <- read_feather(paste0(root,'LIMITED_USE/LU_GEOSPATIAL/geo_matched/wash/points_2017_09_28.feather'))
Encoding(pt_collapse$w_source_drink) <- "windows-1252"
Encoding(pt_collapse$w_source_other) <- "windows-1252"
Encoding(pt_collapse$t_type) <- "windows-1252"
pt_collapse <- get(name)
}
if (!("poly_collapse" %in% ls()) & data_type == 'poly') {
name <- read_feather(paste0(root,'LIMITED_USE/LU_GEOSPATIAL/geo_matched/wash/poly_2017_09_28.feather'))
Encoding(poly_collapse$w_source_drink) <- "windows-1252"
Encoding(poly_collapse$w_source_other) <- "windows-1252"
Encoding(poly_collapse$t_type) <- "windows-1252"
pt_collapse <- get(name)
rm(poly_collapse)
}
if (!("definitions" %in% ls())) {
if (indi_fam == "sani") {
definitions <- read.csv(paste0(root,'WORK/11_geospatial/wash/definitions/t_type_defined_updated_2017_09_07.csv'),
encoding="windows-1252", stringsAsFactors = F)
} else {
definitions <- read.csv(paste0(root,'WORK/11_geospatial/wash/definitions/w_source_defined_updated_2017_09_28.csv'),
encoding="windows-1252", stringsAsFactors = F)
definitions2 <- read.csv(paste0(root,'WORK/11_geospatial/wash/definitions/w_other_defined_updated_2017_09_28.csv'),
encoding="windows-1252", stringsAsFactors = F)
definitions2 <- rename(definitions2, sdg2 = sdg)
}
}
definitions <- distinct(definitions)
if (exists('definitions2')) {definitions2 <- distinct(definitions2)}
rm(list = setdiff(ls(),c('definitions','pt_collapse','definitions2','indi_fam','repo','data_type','root','agg_level', 'sdg', 'project')))
#### Load functions ####
setwd(repo)
source('functions/hh_cw.R')
source('functions/address_missing.R')
source('functions/cw_indi.R')
source('functions/agg_wash.R')
source('functions/define_wash.R')
source('functions/collapse_gbd.R')
#### Subset & Shape Data ####
# Subset to relevant variables
if(project == "gbd"){
ptdat_0 <- dplyr::select(pt_collapse, nid, iso3, strata, psu, lat, long, survey_series, hhweight, urban, w_source_drink, w_source_other,
hh_size, year_start,hhweight,shapefile,location_code)
} else {
ptdat_0 <- dplyr::select(pt_collapse, nid, iso3, lat, long, survey_series, hhweight, urban, w_source_drink, w_source_other,
hh_size, year_start,hhweight,shapefile,location_code)
}
problem_list <- filter(ptdat_0, hh_size <= 0)
#setwd('C:/Users/adesh/Desktop')
#write.csv(problem_list %>% group_by(nid, iso3, survey_series, year_start) %>% summarize(obs = n(), min_hhs = min(hh_size)),
#          file = paste0(data_type,"_problems.csv"))
setwd(repo)
if (data_type == 'pt') {
ptdat <- mutate(ptdat_0, cluster_id = paste(iso3, lat, long, survey_series, year_start, sep = "_"))
} else {
ptdat <- mutate(ptdat_0, cluster_id = paste(iso3, shapefile, location_code, survey_series, year_start, sep = "_"))
}
short_id <- data.frame(cluster_id = unique(ptdat$cluster_id),
id_short = seq(1:length(unique(ptdat$cluster_id))),
stringsAsFactors = F)
class(ptdat)
ptdat <- left_join(ptdat, short_id, by = 'cluster_id')
rm(short_id)
ptdat <- dplyr::select(ptdat, -cluster_id)
if (data_type == "pt" & agg_level != 'country') {ptdat$hhweight <- 1}
summary(pt_dat$hhweight)
summary(ptdat$hhweight)
if (data_type == "pt") {ptdat$shapefile <- NA; ptdat$location_code <- NA}
class(ptdat)
ptdat <- define_indi()
ptdat <- rm_miss()
miss_wts <- unique(ptdat$id_short[which(is.na(ptdat$hhweight))])
ptdat <- filter(ptdat, !(id_short %in% miss_wts))
invalid_hhs <- unique(ptdat$id_short[which(ptdat$hh_size <= 0)])
ptdat <- filter(ptdat, !(id_short %in% invalid_hhs))
ptdat <- hh_cw(data = ptdat)
ptdat <- impute_indi()
ptdat <- agg_indi(mydat = ptdat, var_family = indi_fam, dt_type = data_type, agg = agg_level, proj = project)
ptdat2 <- cw_indi()
head(ptdat)
if(project == "gbd") {
ptdat <- reshape(ptdat, idvar = c("year_start", "iso3", "survey_series", "nid"), timevar = "var", v.names = c("mean", "se", "deff"), direction = "wide", sep = "_")
colnames(ptdat)<- sub("mean_", "", colnames(ptdat))
}
ptdat2 <- cw_indi()
head(ptdat)
head(ptdat2)
plot(ptdat$se_piped, ptdat2$se_piped)
plot(ptdat$piped, ptdat2$piped)
plot(ptdat$imp, ptdat2$imp)
plot(ptdat$unimp, ptdat2$unimp)
plot(ptdat$surface, ptdat2$surface)
sdi <- fread("C:/Users/wgodwin/Desktop/sdi.csv")
locs <- fread("J:/temp/wgodwin/diagnostics/loc_metadata.csv")
sdi <- merge(sdi, locs, by="location_name")
head(sd)
head(sdi)
locs <- locs[, .(location_id, location_name, level)]
sdi <- merge(sdi, locs, by="location_name")
sdi <- fread("C:/Users/wgodwin/Desktop/sdi.csv")
sdi <- merge(sdi, locs, by="location_name")
head(sdi)
dt <- as.data.table(ptdat2)
head(dt)
setnames("year_start", "year_id")
setnames(dt, "year_start", "year_id")
dt2 <- merge(dt, sdi, by = c("location_id", "year_id"))
locs <- fread("J:/temp/wgodwin/diagnostics/loc_metadata.csv")
locs <- locs[, .(ihme_loc_id, location_name, level)]
sdi <- merge(sdi, locs, by="location_name")
sdi <- fread("C:/Users/wgodwin/Desktop/sdi.csv")
sdi <- merge(sdi, locs, by="location_name")
dt2 <- merge(dt, sdi, by = c("ihme_loc_id", "year_id"))
setnames(dt, "iso3", "ihme_loc_id")
dt2 <- merge(dt, sdi, by = c("ihme_loc_id", "year_id"))
head(dt2)
plot(dt2$piped, dt2$mean_value)
plot(dt2$imp, dt2$mean_value)
plot(dt2$mean_value, dt2$imp, main = "Lowess Improved Water")
lines(lowess(nat_dt$sdi, nat_dt$data))
lines(lowess(dt2$mean_value, dt2$imp))
lines(lowess(dt2$mean_value, dt2$imp, f=.2), col = 3)
lines(lowess(dt2$mean_value, dt2$imp, f=.1), col = 4)
lines(lowess(dt2$mean_value, dt2$imp, f=.5), col = 5)
rm(list = ls())
# Define indicator family; can be water, sani, or hw
indi_fam <- "sani"
# Define agg level; can be country or '' [use '' for default]
agg_level <- 'country'
# Define indicator era
sdg <- F
# define process
windows <- Sys.info()[1]=="Windows"
user <- ifelse(windows, Sys.getenv("USERNAME"), Sys.getenv("USER"))
project <- ifelse(user == "wgodwin", "gbd", "geo")
# Set repo path
root <- ifelse(Sys.info()[1]=="Windows", "J:/", "/snfs1/")
if(project == "gbd") repo <- ifelse(Sys.info()[1]=="Windows", 'H:/wash_mapping/01_collapse/',
'/snfs2/HOME/wgodwin/wash_mapping/01_collapse/')
#'/share/code/geospatial/adesh/wash_mapping/01_collapse/')
# Load Packages
# Set package library
#if(Sys.info()[1]!="Windows") {
#package_lib <- paste0(root,'temp/geospatial/packages')
#.libPaths(package_lib)
#}
# Detach all but base packages
detachAllPackages <- function() {
basic.packages <- c("package:stats","package:graphics","package:grDevices",
"package:utils","package:datasets","package:methods",
"package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:",search()))==1,TRUE,FALSE)]
package.list <- setdiff(package.list,basic.packages)
if (length(package.list)>0)  for (package in package.list)
detach(package, character.only=TRUE)
}
detachAllPackages()
packages <- c('data.table', 'haven', 'survey', 'reshape2', 'dplyr', 'feather')
new.packages <- packages[!(packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(packages, library, character.only = T)
#for (data_type in c("pt", "poly")){
data_type <- "pt"
message(paste("Loading",data_type, "data"))
# Load data
if (!("pt_collapse" %in% ls()) & data_type == 'pt') {
name <- read_feather(paste0(root,'LIMITED_USE/LU_GEOSPATIAL/geo_matched/wash/points_2017_09_28.feather'))
Encoding(pt_collapse$w_source_drink) <- "windows-1252"
Encoding(pt_collapse$w_source_other) <- "windows-1252"
Encoding(pt_collapse$t_type) <- "windows-1252"
pt_collapse <- get(name)
}
if (!("poly_collapse" %in% ls()) & data_type == 'poly') {
name <- read_feather(paste0(root,'LIMITED_USE/LU_GEOSPATIAL/geo_matched/wash/poly_2017_09_28.feather'))
Encoding(poly_collapse$w_source_drink) <- "windows-1252"
Encoding(poly_collapse$w_source_other) <- "windows-1252"
Encoding(poly_collapse$t_type) <- "windows-1252"
pt_collapse <- get(name)
rm(poly_collapse)
}
if (!("definitions" %in% ls())) {
if (indi_fam == "sani") {
definitions <- read.csv(paste0(root,'WORK/11_geospatial/wash/definitions/t_type_defined_updated_2017_09_07.csv'),
encoding="windows-1252", stringsAsFactors = F)
} else {
definitions <- read.csv(paste0(root,'WORK/11_geospatial/wash/definitions/w_source_defined_updated_2017_09_28.csv'),
encoding="windows-1252", stringsAsFactors = F)
definitions2 <- read.csv(paste0(root,'WORK/11_geospatial/wash/definitions/w_other_defined_updated_2017_09_28.csv'),
encoding="windows-1252", stringsAsFactors = F)
definitions2 <- rename(definitions2, sdg2 = sdg)
}
}
definitions <- distinct(definitions)
if (exists('definitions2')) {definitions2 <- distinct(definitions2)}
rm(list = setdiff(ls(),c('definitions','pt_collapse','definitions2','indi_fam','repo','data_type','root','agg_level', 'sdg', 'project')))
#### Load functions ####
setwd(repo)
source('functions/hh_cw.R')
source('functions/address_missing.R')
source('functions/cw_indi.R')
source('functions/agg_wash.R')
source('functions/define_wash.R')
source('functions/collapse_gbd.R')
#### Subset & Shape Data ####
# Subset to relevant variables
if(project == "gbd"){
ptdat_0 <- dplyr::select(pt_collapse, nid, iso3, strata, psu, lat, long, survey_series, hhweight, urban, w_source_drink, w_source_other,
hh_size, year_start,hhweight,shapefile,location_code)
} else {
ptdat_0 <- dplyr::select(pt_collapse, nid, iso3, lat, long, survey_series, hhweight, urban, w_source_drink, w_source_other,
hh_size, year_start,hhweight,shapefile,location_code)
}
problem_list <- filter(ptdat_0, hh_size <= 0)
pt_collapse <- read_feather(paste0(root,'LIMITED_USE/LU_GEOSPATIAL/geo_matched/wash/points_2017_09_28.feather'))
head(definitions)
definitions <- distinct(definitions)
if (exists('definitions2')) {definitions2 <- distinct(definitions2)}
rm(list = setdiff(ls(),c('definitions','pt_collapse','definitions2','indi_fam','repo','data_type','root','agg_level', 'sdg', 'project')))
#### Load functions ####
setwd(repo)
source('functions/hh_cw.R')
source('functions/address_missing.R')
source('functions/cw_indi.R')
source('functions/agg_wash.R')
source('functions/define_wash.R')
source('functions/collapse_gbd.R')
if(project == "gbd"){
ptdat_0 <- dplyr::select(pt_collapse, nid, iso3, strata, psu, lat, long, survey_series, hhweight, urban, w_source_drink, w_source_other,
hh_size, year_start,hhweight,shapefile,location_code)
} else {
ptdat_0 <- dplyr::select(pt_collapse, nid, iso3, lat, long, survey_series, hhweight, urban, w_source_drink, w_source_other,
hh_size, year_start,hhweight,shapefile,location_code)
}
problem_list <- filter(ptdat_0, hh_size <= 0)
#setwd('C:/Users/adesh/Desktop')
#write.csv(problem_list %>% group_by(nid, iso3, survey_series, year_start) %>% summarize(obs = n(), min_hhs = min(hh_size)),
#          file = paste0(data_type,"_problems.csv"))
setwd(repo)
# Create a unique cluster id
if (data_type == 'pt') {
ptdat <- mutate(ptdat_0, cluster_id = paste(iso3, lat, long, survey_series, year_start, sep = "_"))
} else {
ptdat <- mutate(ptdat_0, cluster_id = paste(iso3, shapefile, location_code, survey_series, year_start, sep = "_"))
}
short_id <- data.frame(cluster_id = unique(ptdat$cluster_id),
id_short = seq(1:length(unique(ptdat$cluster_id))),
stringsAsFactors = F)
ptdat <- left_join(ptdat, short_id, by = 'cluster_id')
rm(short_id)
# Remove longer cluster_ids
ptdat <- dplyr::select(ptdat, -cluster_id)
# Change weight to 1 if collapsing point data
if (data_type == "pt" & agg_level != 'country') {ptdat$hhweight <- 1}
if (data_type == "pt") {ptdat$shapefile <- NA; ptdat$location_code <- NA}
class(ptdat)
ptdat <- define_indi()
head(ptdat)
ptdat <- as.data.frame(ptdat) ### Check on why the ptdat is turning into a data.table-causing left_join in define_indi to break
ptdat <- define_indi()
head(ptdat)
if(project == "gbd"){
ptdat_0 <- dplyr::select(pt_collapse, nid, iso3, strata, psu, lat, long, survey_series, hhweight, urban, w_source_drink, w_source_other, t_type,
hh_size, year_start,hhweight,shapefile,location_code)
} else {
ptdat_0 <- dplyr::select(pt_collapse, nid, iso3, lat, long, survey_series, hhweight, urban, w_source_drink, w_source_other,
hh_size, year_start,hhweight,shapefile,location_code)
}
problem_list <- filter(ptdat_0, hh_size <= 0)
#setwd('C:/Users/adesh/Desktop')
#write.csv(problem_list %>% group_by(nid, iso3, survey_series, year_start) %>% summarize(obs = n(), min_hhs = min(hh_size)),
#          file = paste0(data_type,"_problems.csv"))
setwd(repo)
# Create a unique cluster id
if (data_type == 'pt') {
ptdat <- mutate(ptdat_0, cluster_id = paste(iso3, lat, long, survey_series, year_start, sep = "_"))
} else {
ptdat <- mutate(ptdat_0, cluster_id = paste(iso3, shapefile, location_code, survey_series, year_start, sep = "_"))
}
short_id <- data.frame(cluster_id = unique(ptdat$cluster_id),
id_short = seq(1:length(unique(ptdat$cluster_id))),
stringsAsFactors = F)
ptdat <- left_join(ptdat, short_id, by = 'cluster_id')
rm(short_id)
# Remove longer cluster_ids
ptdat <- dplyr::select(ptdat, -cluster_id)
# Change weight to 1 if collapsing point data
if (data_type == "pt" & agg_level != 'country') {ptdat$hhweight <- 1}
# Change shapefile and location code to missing if collapsing point data
if (data_type == "pt") {ptdat$shapefile <- NA; ptdat$location_code <- NA}
#### Define Indicator ####
message("Defining Indicator...")
class(ptdat)
ptdat <- define_indi()
head(ptdat)
ptdat <- as.data.frame(ptdat) ### Check on why the ptdat is turning into a data.table-causing left_join in define_indi to break
ptdat <- define_indi()
head(definitions)
message("Addressing Missingness...")
